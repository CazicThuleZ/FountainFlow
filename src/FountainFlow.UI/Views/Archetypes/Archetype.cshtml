@{
    ViewBag.Title = "Story Elements";
    ViewBag.SubTitle = "Archetypes";
}

@model List<FountainFlowUI.Models.ArchetypeViewModel>
@section styles
{
    <!-- Datatable css -->
    <link href="~/vendor/datatables.net-bs5/css/dataTables.bootstrap5.min.css" rel="stylesheet" type="text/css" />
    <link href="~/vendor/datatables.net-responsive-bs5/css/responsive.bootstrap5.min.css" rel="stylesheet"
        type="text/css" />
    <!-- Dropzone css -->
    <link href="~/vendor/dropzone/dropzone.css" rel="stylesheet" type="text/css" />

    <style>
        .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .table-container {
            position: relative;
        }
        
        /* Make rows appear clickable */
        #archetypes-datatable tbody tr {
            cursor: pointer;
        }
        
        #archetypes-datatable tbody tr:hover {
            background-color: rgba(0, 123, 255, 0.05);
        }
        
        /* Keep action buttons with normal cursor */
        #archetypes-datatable .table-action a {
            cursor: pointer;
        }
    </style>
}

@await Html.PartialAsync("~/Views/Shared/Partials/_PageTitle.cshtml")

<div class="row">
    <div class="col-4">
        <div class="card">
            <div class="card-body">
                <div class="row mb-2">
                    <div class="col-sm-5">
                        <a href="javascript:void(0);" class="btn btn-primary mb-2"><i
                                class="mdi mdi-plus-circle me-2"></i> Add Archetype</a>
                    </div>
                    <div class="col-sm-7">
                        <div class="text-sm-end">
                            <button id="delete-selected-btn" type="button" class="btn btn-danger mb-2 me-1"><i
                                    class="mdi mdi-delete"></i></button>
                            <button type="button" class="btn btn-light mb-2 me-1" id="import-btn">Import</button>
                            <button type="button" class="btn btn-light mb-2" id="export-btn">Export</button>
                        </div>
                    </div><!-- end col-->
                </div>

                <div class="table-responsive  table-container">
                    <table class="table table-centered w-100 dt-responsive nowrap" id="archetypes-datatable">
                        <thead class="table-light">
                            <tr>
                                <th class="all" style="width: 20px;">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="customCheck1">
                                        <label class="form-check-label" for="customCheck1">&nbsp;</label>
                                    </div>
                                </th>
                                <th class="all">Domain / Architect</th>
                                <th>Rank</th>
                                <th style="width: 85px;">Action</th>
                            </tr>
                        </thead>

                        <tbody>
                            <!-- Archetypes will be loaded dynamically via JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div> <!-- end card-body-->
        </div> <!-- end card-->
    </div> <!-- end col -->
    <div class="col-8">

        <div class="card">
            <div class="card-body">
                <div class="tab-content">
                    <div class="tab-pane show active" id="justified-tabs-preview">
                        <ul class="nav nav-pills bg-nav-pills nav-justified mb-3">
                            <li class="nav-item">
                                <a href="#beat1" data-bs-toggle="tab" aria-expanded="false"
                                    class="nav-link rounded-0 active">
                                    <i class="mdi mdi-home-variant d-md-none d-block"></i>
                                    <span class="d-none d-md-block">Beats</span>
                                </a>
                            </li>
                            <li class="nav-item">
                                <a href="#genre1" data-bs-toggle="tab" aria-expanded="true" class="nav-link rounded-0">
                                    <i class="mdi mdi-account-circle d-md-none d-block"></i>
                                    <span class="d-none d-md-block">Genres</span>
                                </a>
                            </li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane show active" id="beat1">
                                <!-- Beats content will be loaded dynamically via JavaScript -->
                                <div id="beats-content" class="card">
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-lg-5">
                                                <a href="javascript: void(0);" class="text-center d-block mb-4">
                                                    <img id="archetype-image" src="" class="img-fluid"
                                                        style="max-width: 280px;" alt="Story-img" />
                                                </a>
                                            </div> <!-- end col -->
                                            <div class="col-lg-7">
                                                <form class="ps-lg-4">
                                                    <h3 id="archetype-title" class="mt-0"></h3>
                                                    <p id="archetype-date" class="mb-1"></p>
                                                    <div class="mt-4">
                                                        <p id="archetype-description"></p>
                                                    </div>
                                                </form>
                                            </div> <!-- end col -->

                                            <div class="col-xl-12">
                                                <div class="card">
                                                    <div
                                                        class="card-header d-flex justify-content-between align-items-center">
                                                        <h4 class="header-title">Story Elements</h4>
                                                        <div class="dropdown">
                                                            <a href="#" class="dropdown-toggle arrow-none card-drop"
                                                                data-bs-toggle="dropdown" aria-expanded="false">
                                                                <i class="mdi mdi-dots-vertical"></i>
                                                            </a>
                                                            <div class="dropdown-menu dropdown-menu-end">
                                                                <!-- item-->
                                                                <a href="javascript:void(0);"
                                                                    class="dropdown-item">Edit</a>
                                                                <!-- item-->
                                                                <a href="javascript:void(0);"
                                                                    class="dropdown-item">Examples</a>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="card-body py-0 mb-3" data-simplebar
                                                        style="max-height: 315px;">
                                                        <div id="beats-timeline" class="timeline-alt py-0">
                                                            <!-- Beats will be loaded dynamically -->
                                                        </div>
                                                        <!-- end timeline -->
                                                    </div> <!-- end simplebar -->
                                                </div>
                                                <!-- end card-->
                                            </div>
                                        </div> <!-- end row-->
                                    </div> <!-- end card-body-->
                                </div> <!-- end card-->
                            </div>
                            <div class="tab-pane" id="genre1">
                                <div id="genres-content" class="col-md-6 col-xxl-12">
                                    <!-- Genres will be loaded dynamically -->
                                </div> <!-- end col -->
                            </div>
                        </div>
                    </div> <!-- end preview-->
                </div> <!-- end tab-content-->
            </div> <!-- end card-body -->
        </div> <!-- end card-->

    </div> <!-- end col -->
</div>
<!-- end row -->

<!-- Import Modal -->
<div class="modal fade" id="importModal" tabindex="-1" role="dialog" aria-labelledby="importModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="importModalLabel">Import Archetypes</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-hidden="true"></button>
            </div>
            <div class="modal-body">
                <p class="mb-3">Select a JSON file containing archetype data to import.</p>
                <form action="#" id="importDropzone" class="dropzone" data-plugin="dropzone"
                    data-previews-container="#file-previews" data-upload-preview-template="#uploadPreviewTemplate">
                    <div class="fallback">
                        <input name="file" type="file" accept="application/json" />
                    </div>
                    <div class="dz-message needsclick">
                        <i class="h1 text-muted dripicons-cloud-upload"></i>
                        <h3>Drop JSON file here or click to upload.</h3>
                        <span class="text-muted font-13">(Only .json files are accepted)</span>
                    </div>
                </form>
                <div class="dropzone-previews mt-3" id="file-previews"></div>
                <div class="d-none" id="uploadPreviewTemplate">
                    <div class="card mt-1 mb-0 shadow-none border">
                        <div class="p-2">
                            <div class="row align-items-center">
                                <div class="col-auto">
                                    <img data-dz-thumbnail src="#" class="avatar-sm rounded bg-light" alt="">
                                </div>
                                <div class="col ps-0">
                                    <a href="javascript:void(0);" class="text-muted fw-bold" data-dz-name></a>
                                    <p class="mb-0" data-dz-size></p>
                                </div>
                                <div class="col-auto">
                                    <a href="#" class="btn btn-link btn-lg text-muted" data-dz-remove>
                                        <i class="dripicons-cross"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="import-submit-btn" disabled>Import</button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="position-fixed top-0 end-0 p-3" style="z-index: 1050">
    <div id="importToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <i id="toast-icon" class="mdi mdi-circle-slice-8 font-18 me-1"></i>
            <strong class="me-auto" id="toast-title">Notification</strong>
            <small id="toast-time">Just now</small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toast-message">
            Hello, world! This is a toast message.
        </div>
    </div>
</div>


@section scripts
{
    <!-- Datatable js -->
    <script src="~/vendor/datatables.net/js/jquery.dataTables.min.js"></script>
    <script src="~/vendor/datatables.net-bs5/js/dataTables.bootstrap5.min.js"></script>
    <script src="~/vendor/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/vendor/datatables.net-responsive-bs5/js/responsive.bootstrap5.min.js"></script>
    <script src="~/vendor/jquery-datatables-checkboxes/js/dataTables.checkboxes.min.js"></script>
    <!-- Dropzone js -->
    <script src="~/vendor/dropzone/dropzone-min.js"></script>

    <script>
        $(document).ready(function () {
            // Handle export button click
            $('#export-btn').on('click', function () {
                handleExport();
            });

            // Handle import button click
            $('#import-btn').on('click', function () {
                $('#importModal').modal('show');
            });

            $('#delete-selected-btn').on('click', function () {
                handleDeleteSelected();
            });

            // Initialize variables
            let archetypes = [];
            let selectedArchetypeId = null;

            // Load archetypes on page load
            loadArchetypes();

            function loadArchetypes() {
                // Show loading state if it's not already there
                const tableContainer = $('#archetypes-datatable').closest('.table-container');
                if (tableContainer.find('.overlay').length === 0) {
                    tableContainer.append('<div class="overlay"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>');
                }

                // Clear any existing DataTable
                if ($.fn.DataTable.isDataTable('#archetypes-datatable')) {
                    $('#archetypes-datatable').DataTable().clear().destroy();
                }

                $.ajax({
                    url: '@Url.Action("GetArchetypes", "Archetypes")',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        // Remove loading state
                        tableContainer.find('.overlay').remove();

                        archetypes = data;

                        // Sort archetypes by rank
                        archetypes.sort((a, b) => a.rank - b.rank);

                        // Populate the archetypes table
                        populateArchetypesTable(archetypes);

                        // Force DataTable to recalculate its info display
                        if ($.fn.DataTable.isDataTable('#archetypes-datatable')) {
                            const table = $('#archetypes-datatable').DataTable();
                            table.page.info();
                            table.draw(false);
                        }

                        // Select the first archetype by default if no archetype is currently selected
                        // or if the previously selected archetype is no longer available
                        if (!selectedArchetypeId || !archetypes.some(a => a.id === selectedArchetypeId)) {
                            if (archetypes.length > 0) {
                                selectArchetype(archetypes[0].id);
                            } else {
                                clearArchetypeDetails();
                            }
                        } else if (selectedArchetypeId) {
                            // If there was a previously selected archetype that still exists, reselect it
                            const row = $(`#archetypes-datatable tbody tr[data-archetype-id="${selectedArchetypeId}"]`);
                            if (row.length) {
                                row.addClass('table-active');
                            }
                        }
                    },
                    error: function (error) {
                        // Remove loading state
                        tableContainer.find('.overlay').remove();

                        console.error('Error loading archetypes:', error);
                        showToast('error', 'Load Failed', 'An error occurred while loading archetypes.');
                    }
                });
            }

            function wireUpDeleteButtons() {
                $('.delete-archetype').on('click', function (e) {
                    e.preventDefault();
                    const archetypeId = $(this).closest('tr').data('archetype-id');
                    deleteArchetype(archetypeId);
                });
            }

            function populateArchetypesTable(archetypes) {
                const tableBody = $('#archetypes-datatable tbody');
                tableBody.empty();

                archetypes.forEach((archetype, index) => {
                    const row = `
                                                        <tr data-archetype-id="${archetype.id}">
                                                            <td>
                                                                <div class="form-check">
                                                                    <input type="checkbox" class="form-check-input archetype-checkbox" id="customCheck${index}">
                                                                    <label class="form-check-label" for="customCheck${index}">&nbsp;</label>
                                                                </div>
                                                            </td>
                                                            <td>
                                                                <div class="d-flex align-items-center">
                                                                    <div>
                                                                        <a href="javascript:void(0);" class="text-body fw-semibold archetype-link">${archetype.domain}</a>
                                                                        <p class="text-muted mb-0">${archetype.architect}</p>
                                                                    </div>
                                                                </div>
                                                            </td>
                                                            <td>${archetype.rank}</td>
                                                            <td class="table-action">
                                                                <a href="javascript:void(0);" class="action-icon view-archetype"> <i class="mdi mdi-eye"></i></a>
                                                                <a href="javascript:void(0);" class="action-icon"> <i class="mdi mdi-square-edit-outline"></i></a>
                                                                <a href="javascript:void(0);" class="action-icon delete-archetype"> <i class="mdi mdi-delete"></i></a>
                                                            </td>
                                                        </tr>
                                                    `;
                    tableBody.append(row);
                });

                // Make the entire row clickable except for action buttons
                $('#archetypes-datatable tbody tr').on('click', function(e) {
                    // Don't trigger row click if clicking on a checkbox or action button
                    if ($(e.target).is('input[type="checkbox"]') ||
                        $(e.target).closest('.table-action').length ||
                        $(e.target).is('i.mdi') ||
                        $(e.target).is('a.action-icon')) {
                        return;
                    }
                    
                    const archetypeId = $(this).data('archetype-id');
                    selectArchetype(archetypeId);
                });
                
                // Keep the original click handlers for backward compatibility
                $('.archetype-link, .view-archetype').on('click', function(e) {
                    e.stopPropagation(); // Prevent double triggering with the row click
                    const archetypeId = $(this).closest('tr').data('archetype-id');
                    selectArchetype(archetypeId);
                });

                // Wire up the delete buttons
                wireUpDeleteButtons();

                // Initialize DataTable
                if ($.fn.DataTable.isDataTable('#archetypes-datatable')) {
                    $('#archetypes-datatable').DataTable().destroy();
                }

                // Clear any lingering DataTable state
                $('#archetypes-datatable').empty();
                $('#archetypes-datatable').html('<thead class="table-light"><tr><th class="all" style="width: 20px;"><div class="form-check"><input type="checkbox" class="form-check-input" id="customCheck1"><label class="form-check-label" for="customCheck1">&nbsp;</label></div></th><th class="all">Domain / Architect</th><th>Rank</th><th style="width: 85px;">Action</th></tr></thead><tbody></tbody>');
                
                // Re-append the rows to the tbody
                $('#archetypes-datatable tbody').html(tableBody.html());
                
                // Reinitialize the DataTable with a slight delay to ensure DOM is updated
                setTimeout(function() {
                    $('#archetypes-datatable').DataTable({
                        responsive: true,
                        "order": [[2, "asc"]], // Sort by rank column (now index 2)
                        "columnDefs": [
                            { "orderable": false, "targets": [0, 3] } // Disable ordering for checkbox and actions columns
                        ],
                        "drawCallback": function() {
                            // Re-wire event handlers after DataTable redraws
                            wireUpDeleteButtons();
                            
                            // Make the entire row clickable except for action buttons
                            $('#archetypes-datatable tbody tr').off('click').on('click', function(e) {
                                // Don't trigger row click if clicking on a checkbox or action button
                                if ($(e.target).is('input[type="checkbox"]') ||
                                    $(e.target).closest('.table-action').length ||
                                    $(e.target).is('i.mdi') ||
                                    $(e.target).is('a.action-icon')) {
                                    return;
                                }
                                
                                const archetypeId = $(this).data('archetype-id');
                                selectArchetype(archetypeId);
                            });
                            
                            // Keep the original click handlers for backward compatibility
                            $('.archetype-link, .view-archetype').off('click').on('click', function(e) {
                                e.stopPropagation(); // Prevent double triggering with the row click
                                const archetypeId = $(this).closest('tr').data('archetype-id');
                                selectArchetype(archetypeId);
                            });
                        }
                    });
                }, 50);
            }

            function clearArchetypeDetails() {
                $('#archetype-image').attr('src', '');
                $('#archetype-title').text('');
                $('#archetype-date').text('');
                $('#archetype-description').text('');
                $('#beats-timeline').empty();
                $('#genres-content').empty();

                // Display a message in the beats timeline
                $('#beats-timeline').append('<div class="text-center p-3">No archetype selected.</div>');

                // Display a message in the genres content
                $('#genres-content').append('<div class="text-center p-3">No archetype selected.</div>');
            }

            function handleDeleteSelected() {
                // Get all checked archetypes
                const checkedArchetypeIds = [];
                const checkedRows = [];
                
                $('#archetypes-datatable tbody input.archetype-checkbox:checked').each(function () {
                    const row = $(this).closest('tr');
                    const archetypeId = row.data('archetype-id');
                    if (archetypeId) {
                        checkedArchetypeIds.push(archetypeId);
                        checkedRows.push(row);
                    }
                });

                if (checkedArchetypeIds.length === 0) {
                    // Show toast notification
                    showToast('error', 'Delete Failed', 'Please select at least one archetype to delete.');
                    return;
                }

                // Show loading state
                const tableContainer = $('#archetypes-datatable').closest('.table-container');
                if (tableContainer.find('.overlay').length === 0) {
                    tableContainer.append('<div class="overlay"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>');
                }

                // Call the delete endpoint
                $.ajax({
                    url: '@Url.Action("DeleteMultipleArchetypes", "Archetypes")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(checkedArchetypeIds),
                    success: function (response) {
                        if (response.success) {
                            showToast('success', 'Delete Successful', `Successfully deleted ${response.deletedCount} archetype(s).`);

                            // First, remove the rows from the DataTable directly
                            if ($.fn.DataTable.isDataTable('#archetypes-datatable')) {
                                const table = $('#archetypes-datatable').DataTable();
                                
                                // Remove each row from the DataTable
                                checkedRows.forEach(row => {
                                    table.row(row).remove();
                                });
                                
                                // Redraw the table to update the display
                                table.draw(false);
                                
                                // Update the "Showing x to y of z entries" info
                                table.page.info();
                            }

                            // Then refresh the archetypes list to ensure data consistency
                            loadArchetypes();
                        } else {
                            // Remove loading state
                            tableContainer.find('.overlay').remove();

                            showToast('error', 'Delete Failed', response.message || 'Failed to delete archetypes.');
                        }
                    },
                    error: function (error) {
                        // Remove loading state
                        tableContainer.find('.overlay').remove();

                        console.error('Error deleting archetypes:', error);
                        showToast('error', 'Delete Failed', 'An error occurred while deleting archetypes.');
                    }
                });
            }

            function deleteArchetype(archetypeId) {
                if (!archetypeId) {
                    showToast('error', 'Delete Failed', 'Invalid archetype ID.');
                    return;
                }

                // Show loading state
                const tableContainer = $('#archetypes-datatable').closest('.table-container');
                if (tableContainer.find('.overlay').length === 0) {
                    tableContainer.append('<div class="overlay"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>');
                }

                // Call the delete endpoint for a single archetype
                $.ajax({
                    url: `@Url.Action("DeleteArchetype", "Archetypes")?id=${archetypeId}`,
                    type: 'DELETE',
                    success: function (response) {
                        showToast('success', 'Delete Successful', 'Archetype deleted successfully.');

                        // First, remove the row from the DataTable directly
                        if ($.fn.DataTable.isDataTable('#archetypes-datatable')) {
                            const table = $('#archetypes-datatable').DataTable();
                            const row = $(`#archetypes-datatable tbody tr[data-archetype-id="${archetypeId}"]`);
                            if (row.length) {
                                table.row(row).remove().draw(false);
                            }
                        }

                        // Then refresh the archetypes list to ensure data consistency
                        loadArchetypes();
                    },
                    error: function (error) {
                        // Remove loading state
                        tableContainer.find('.overlay').remove();

                        console.error('Error deleting archetype:', error);
                        showToast('error', 'Delete Failed', 'An error occurred while deleting the archetype.');
                    }
                });
            }


            function selectArchetype(archetypeId) {
                selectedArchetypeId = archetypeId;

                // Highlight the selected row
                $('#archetypes-datatable tbody tr').removeClass('table-active');
                $(`#archetypes-datatable tbody tr[data-archetype-id="${archetypeId}"]`).addClass('table-active');

                // Load archetype details
                $.ajax({
                    url: `@Url.Action("GetArchetype", "Archetypes")?id=${archetypeId}`,
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        // Update the archetype details
                        updateArchetypeDetails(data);

                        // Update the beats
                        updateBeats(data.beats);

                        // Update the genres
                        updateGenres(data.genres);
                    },
                    error: function (error) {
                        console.error('Error loading archetype details:', error);
                    }
                });
            }

            function updateArchetypeDetails(archetype) {
                // Update the archetype image
                const imagePath = archetype.icon ? archetype.icon : '/images/default-archetype.png';
                $('#archetype-image').attr('src', imagePath);

                // Update the archetype title and description
                $('#archetype-title').text(archetype.domain);
                $('#archetype-date').text(`Added Date: ${new Date().toLocaleDateString()}`);
                $('#archetype-description').text(archetype.description);
            }

            function updateBeats(beats) {
                const beatsTimeline = $('#beats-timeline');
                beatsTimeline.empty();

                if (beats && beats.length > 0) {
                    beats.sort((a, b) => a.parentSequence - b.parentSequence);

                    beats.forEach(beat => {
                        const beatItem = `
                                                                                    <div class="timeline-item">
                                                                                        <i class="mdi mdi-upload bg-info-lighten text-info timeline-icon"></i>
                                                                                        <div class="timeline-item-info">
                                                                                            <a href="#" class="text-info fw-bold mb-1 d-block">${beat.name}</a>
                                                                                            <small>${beat.description}</small>
                                                                                            <p class="mb-0 pb-2">
                                                                                                <small class="text-muted">Page ${beat.percentOfStory}</small>
                                                                                            </p>
                                                                                        </div>
                                                                                    </div>
                                                                                `;
                        beatsTimeline.append(beatItem);
                    });
                } else {
                    beatsTimeline.append('<div class="text-center p-3">No beats available for this archetype.</div>');
                }
            }

            function updateGenres(genres) {
                const genresContent = $('#genres-content');
                genresContent.empty();

                if (genres && genres.length > 0) {
                    genres.forEach(genre => {
                        const genreCard = `
                                                                                    <div class="card d-block mb-3">
                                                                                        <div class="card-body">
                                                                                            <div class="dropdown card-widgets">
                                                                                                <a href="#" class="dropdown-toggle arrow-none" data-bs-toggle="dropdown" aria-expanded="false">
                                                                                                    <i class="ri-more-fill"></i>
                                                                                                </a>
                                                                                                <div class="dropdown-menu dropdown-menu-end">
                                                                                                    <a href="javascript:void(0);" class="dropdown-item"><i class="mdi mdi-pencil me-1"></i>Edit</a>
                                                                                                    <a href="javascript:void(0);" class="dropdown-item"><i class="mdi mdi-delete me-1"></i>Delete</a>
                                                                                                    <a href="javascript:void(0);" class="dropdown-item"><i class="mdi mdi-email-outline me-1"></i>Invite</a>
                                                                                                    <a href="javascript:void(0);" class="dropdown-item"><i class="mdi mdi-exit-to-app me-1"></i>Leave</a>
                                                                                                </div>
                                                                                            </div>
                                                                                            <!-- project title-->
                                                                                            <h4 class="mt-0">
                                                                                                <a href="javascript:void(0);" class="text-title">${genre.name}</a>
                                                                                            </h4>
                                                                                            <p class="text-muted font-13 my-3">${genre.description}<a href="javascript:void(0);" class="fw-bold text-muted">view more</a></p>
                                                                                            <!-- project detail-->
                                                                                            <p class="mb-1">
                                                                                                <span class="pe-2 text-nowrap mb-2 d-inline-block">
                                                                                                    <i class="mdi mdi-format-list-bulleted-type text-muted"></i>
                                                                                                    <b>10</b> Examples
                                                                                                </span>
                                                                                                <span class="text-nowrap mb-2 d-inline-block">
                                                                                                    <i class="mdi mdi-comment-multiple-outline text-muted"></i>
                                                                                                    <b>50</b> Hybrids
                                                                                                </span>
                                                                                            </p>
                                                                                        </div>
                                                                                    </div>
                                                                                `;
                        genresContent.append(genreCard);
                    });
                } else {
                    genresContent.append('<div class="text-center p-3">No genres available for this archetype.</div>');
                }
            }

            function handleExport() {
                // Get all checked archetypes
                const checkedArchetypeIds = [];
                $('#archetypes-datatable tbody input[type="checkbox"]:checked').each(function () {
                    const archetypeId = $(this).closest('tr').data('archetype-id');
                    if (archetypeId) {
                        checkedArchetypeIds.push(archetypeId);
                    }
                });

                if (checkedArchetypeIds.length === 0) {
                    // Replace alert with toast notification
                    showToast('error', 'Export Failed', 'Please select at least one archetype to export.');
                    return;
                }

                // Call the export endpoint
                $.ajax({
                    url: '@Url.Action("ExportArchetypes", "Archetypes")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(checkedArchetypeIds),
                    success: function (response) {
                        if (response.success && response.data) {
                            // Create a Blob with the JSON data
                            const jsonData = JSON.stringify(response.data, null, 2);
                            const blob = new Blob([jsonData], { type: 'application/json' });

                            // Create a temporary link element to trigger the download
                            const link = document.createElement('a');
                            link.href = URL.createObjectURL(blob);

                            // Prompt user for save location using the browser's save dialog
                            link.download = 'archetypes_export.json';
                            link.click();

                            // Clean up
                            URL.revokeObjectURL(link.href);
                        } else {
                            alert('Failed to export archetypes. Please try again.');
                        }
                    },
                    error: function (error) {
                        console.error('Error exporting archetypes:', error);
                        alert('An error occurred while exporting archetypes. Please try again.');
                    }
                });
            }

            // Initialize Dropzone
            Dropzone.autoDiscover = false;

            let importDropzone = new Dropzone("#importDropzone", {
                url: '@Url.Action("ImportArchetypes", "Archetypes")',
                maxFilesize: 10, // MB
                maxFiles: 1,
                acceptedFiles: "application/json,.json",
                autoProcessQueue: false,
                addRemoveLinks: true,
                paramName: "files", // Match the parameter name expected by the controller
                init: function () {
                    let submitButton = document.querySelector("#import-submit-btn");
                    let myDropzone = this;

                    // Enable the submit button when a file is added
                    this.on("addedfile", function (file) {
                        console.log("File added to dropzone:", file.name);
                        submitButton.removeAttribute("disabled");
                    });

                    // Disable the submit button when all files are removed
                    this.on("removedfile", function (file) {
                        console.log("File removed from dropzone:", file.name);
                        if (myDropzone.files.length === 0) {
                            submitButton.setAttribute("disabled", "disabled");
                        }
                    });

                    // Process the queue when the submit button is clicked
                    submitButton.addEventListener("click", function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        console.log("Submit button clicked");

                        if (myDropzone.files.length > 0) {
                            console.log("Processing queue with files:", myDropzone.files.length);
                            myDropzone.processQueue();
                        } else {
                            console.log("No files to process");
                        }
                    });

                    // Log when the file is being processed
                    this.on("processing", function (file) {
                        console.log("Processing file:", file.name);
                    });

                    // Log when the file is being sent
                    this.on("sending", function (file, xhr, formData) {
                        console.log("Sending file:", file.name);
                        // Add any additional data if needed
                        // formData.append("key", "value");
                    });

                    // Handle successful upload
                    this.on("success", function (file, response) {
                        console.log("Upload successful:", response);
                        
                        // Show loading state during refresh
                        const tableContainer = $('#archetypes-datatable').closest('.table-container');
                        if (tableContainer.find('.overlay').length === 0) {
                            tableContainer.append('<div class="overlay"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>');
                        }
                        
                        // Close the modal
                        $('#importModal').modal('hide');

                        // Show success toast
                        showToast('success', 'Import Successful', response.message);

                        // Clear the DataTable completely before refreshing
                        if ($.fn.DataTable.isDataTable('#archetypes-datatable')) {
                            $('#archetypes-datatable').DataTable().destroy();
                            $('#archetypes-datatable').empty();
                            $('#archetypes-datatable').html('<thead class="table-light"><tr><th class="all" style="width: 20px;"><div class="form-check"><input type="checkbox" class="form-check-input" id="customCheck1"><label class="form-check-label" for="customCheck1">&nbsp;</label></div></th><th class="all">Domain / Architect</th><th>Rank</th><th style="width: 85px;">Action</th></tr></thead><tbody></tbody>');
                        }

                        // Refresh the archetypes list with a slight delay to ensure UI updates
                        setTimeout(function() {
                            loadArchetypes();
                            
                            // Clear the dropzone
                            myDropzone.removeAllFiles(true);
                        }, 100);
                    });

                    // Handle upload error
                    this.on("error", function (file, errorMessage, xhr) {
                        console.error("Upload error:", errorMessage);
                        let message = errorMessage;
                        if (xhr) {
                            message = xhr.statusText || errorMessage;
                        }

                        // Show error toast
                        showToast('error', 'Import Failed', message);
                    });
                }
            });

            // Function to show toast notifications
            function showToast(type, title, message) {
                const toast = $('#importToast');
                const toastIcon = $('#toast-icon');
                const toastTitle = $('#toast-title');
                const toastMessage = $('#toast-message');
                const toastTime = $('#toast-time');

                // Set icon and color based on type
                if (type === 'success') {
                    toastIcon.removeClass().addClass('mdi mdi-check-circle text-success font-18 me-1');
                } else if (type === 'error') {
                    toastIcon.removeClass().addClass('mdi mdi-alert-circle text-danger font-18 me-1');
                } else {
                    toastIcon.removeClass().addClass('mdi mdi-information text-info font-18 me-1');
                }

                // Set title and message
                toastTitle.text(title);
                toastMessage.text(message);

                // Set time
                const now = new Date();
                toastTime.text(now.toLocaleTimeString());

                // Show the toast
                const bsToast = new bootstrap.Toast(toast);
                bsToast.show();
            }
        });
    </script>
}