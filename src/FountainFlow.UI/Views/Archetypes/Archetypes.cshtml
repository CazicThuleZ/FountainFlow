@using FountainFlowUI.Models
@{
    ViewBag.Title = "Story Archetypes";
}
@model ArchetypeViewModel

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-8">
        <h1>Story Archetypes</h1>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/" aria-label="Return to home">Home</a></li>
                <li class="breadcrumb-item active" aria-current="page">Archetypes</li>
            </ol>
        </nav>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <!-- Archetype List Section -->
        <div class="col-12 col-md-5 col-lg-4">
            <div class="ibox">
                <div class="ibox-content">
                    <form class="mb-4" role="search" aria-label="Filter archetypes">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Filter archetypes"
                                aria-label="Search input" autocomplete="off">
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary">
                                    <i class="fa fa-search" aria-hidden="true"></i>
                                    <span class="ms-1">Filter</span>
                                </button>
                            </div>
                        </div>
                    </form>

                    <div class="table-responsive">
                        <table class="table table-hover" aria-label="Archetype list">
                            <thead>
                                <tr>
                                    <th scope="col"> </th>
                                    <th scope="col">Domain</th>
                                    <th scope="col">Architect</th>
                                    <th scope="col">Rank</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var archetype in Model.Archetypes)
                                {
                                    <tr class="clickable-row" data-id="@archetype.Id" style="cursor: pointer;">
                                        <td>
                                            <img src="@Url.Content($"~/Images/{@archetype.Icon}")" alt="@archetype.Domain"
                                                class="rounded-circle" width="48" height="48">
                                        </td>
                                        <td>@archetype.Domain</td>
                                        <td>@archetype.Architect</td>
                                        <td><span class="badge bg-primary">Active</span></td>
                                        <td class="text-end">
                                            <button class="btn btn-link text-danger delete-archetype"
                                                data-id="@archetype.Id" data-name="@archetype.Domain"
                                                onclick="event.stopPropagation();" title="Delete @archetype.Domain">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="mt-3 d-flex justify-content-center gap-2">
                        <button id="addArchetypeBtn" title="Add New Archetype" class="btn btn-primary btn-sm">
                            <i class="fas fa-plus"></i> <span class="bold">Add New Archetype</span>
                        </button>
                        <button id="exportArchetypeBtn" title="Export Archetypes" class="btn btn-primary btn-sm">
                            <i class="fas fa-file-export"></i> <span class="bold">Export Archetype</span>
                        </button>
                        <button id="importArchetypeBtn" title="Import Archetypes" class="btn btn-primary btn-sm">
                            <i class="fas fa-file-import"></i> <span class="bold">Import Archetype</span>
                        </button>
                    </div>

                </div>
            </div>
        </div>

        <!-- Detail Section -->
        <div class="col-12 col-md-7 col-lg-8">
            <div id="details-container">

                <!-- Details will be loaded here asynchronously -->

            </div>

        </div>
    </div>


    @await Html.PartialAsync("_CreateArchetypePartial", new ArchetypeViewModel())

    @section Scripts {
        <script>
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            })
        </script>
        <script>
            Dropzone.autoDiscover = false;

            $(document).ready(function () {
                console.log('Document ready');
                var getArchetypeDetailsUrl = '@Url.Action("GetArchetypeDetails", "Archetypes")';
                var deleteArchetypeUrl = '@Url.Action("DeleteArchetype", "Archetypes")';

                let allRows = [];
                function initializeRows() {
                    allRows = []; // Clear existing rows
                    $('.clickable-row').each(function () {
                        allRows.push({
                            element: $(this),
                            domain: $(this).find('td:nth-child(2)').text().toLowerCase(),
                            architect: $(this).find('td:nth-child(3)').text().toLowerCase()
                        });
                    });
                }
                initializeRows();

                // Add input event handler for real-time filtering
                $('input[aria-label="Search input"]').on('input', function () {
                    const searchTerm = $(this).val().toLowerCase().trim();
                    filterArchetypes(searchTerm);
                });

                // Handle the filter button click
                $('button:contains("Filter")').on('click', function () {
                    const searchTerm = $('input[aria-label="Search input"]').val().toLowerCase().trim();
                    filterArchetypes(searchTerm);
                });

                function filterArchetypes(searchTerm) {
                    let foundAny = false;
                    let firstVisibleRow = null;

                    allRows.forEach(row => {
                        const matches = row.domain.includes(searchTerm) ||
                            row.architect.includes(searchTerm);

                        if (matches) {
                            row.element.show();
                            foundAny = true;
                            if (!firstVisibleRow) {
                                firstVisibleRow = row.element;
                            }
                        } else {
                            row.element.hide();
                        }
                    });

                    // If no matches found, show a message
                    const noResultsMsg = $('#no-results-message');
                    if (!foundAny) {
                        if (noResultsMsg.length === 0) {
                            $('tbody').append(
                                '<tr id="no-results-message"><td colspan="5" class="text-center text-muted">' +
                                'No archetypes found matching your search</td></tr>'
                            );
                        }
                    } else {
                        noResultsMsg.remove();

                        // If we have results and the currently selected row is hidden,
                        // select the first visible row
                        if ($('.clickable-row.table-active:visible').length === 0 && firstVisibleRow) {
                            loadArchetypeDetails(firstVisibleRow.data('id'));
                        }
                    }
                }

                // Function to load archetype details
                function loadArchetypeDetails(archetypeId) {
                    // Store the currently active tab ID before loading new content
                    var activeTabId = $('.nav-link.active').attr('id');

                    $('#details-container').html('<div class="text-center"><i class="fa fa-spinner fa-spin"></i> Loading...</div>');

                    $.ajax({
                        url: getArchetypeDetailsUrl,
                        data: { id: archetypeId },
                        method: 'GET',
                        success: function (data) {
                            //console.log('Success response:', data);
                            $('#details-container').html(data);

                            // Update visual selection state for rows
                            $('.clickable-row').removeClass('table-active');
                            $('.clickable-row[data-id="' + archetypeId + '"]').addClass('table-active');

                            // If we were on the genre tab, switch back to it
                            if (activeTabId === 'genre-tab') {
                                // Need to wait for Bootstrap to initialize the new tab elements
                                setTimeout(function () {
                                    $('#genre-tab').tab('show');
                                }, 0);
                            }
                            initializeGenreHandlers();
                        },
                        error: function (xhr, status, error) {
                            console.error('Error details:', {
                                status: status,
                                error: error,
                                response: xhr.responseText
                            });
                            $('#details-container').html(`<div class="alert alert-danger">
                                                                                                                                                                                                    Error loading details: ${status} - ${error}
                                                                                                                                                                                                </div>`);
                        }
                    });
                }

                $('.delete-archetype').on('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation(); // Prevent row click from triggering

                    const button = $(this);
                    const archetypeId = button.data('id');
                    const archetypeName = button.data('name');

                    Swal.fire({
                        title: 'Are you sure?',
                        text: `You are about to delete the archetype "${archetypeName}". This action cannot be undone.`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, delete it!',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Perform delete
                            $.ajax({
                                url: deleteArchetypeUrl + '?id=' + archetypeId,
                                method: 'DELETE',
                                success: function () {
                                    // Remove the row with animation
                                    button.closest('tr').fadeOut(400, function () {
                                        $(this).remove();

                                        // If this was the selected row, load first available archetype
                                        if ($(this).hasClass('table-active')) {
                                            const firstRow = $('.clickable-row').first();
                                            if (firstRow.length > 0) {
                                                loadArchetypeDetails(firstRow.data('id'));
                                            } else {
                                                // No more archetypes, clear details
                                                $('#details-container').html('<div class="alert alert-info">No archetypes available.</div>');
                                            }
                                        }

                                        showToast('Success', `The archetype "${archetypeName}" has been deleted.`, 'success');

                                    });
                                },
                                error: function (xhr, status, error) {
                                    showToast('Error', `Failed to delete "${archetypeName} :  " ` + errorMessage, 'success');
                                    console.error('Delete error:', xhr.status, error);
                                }
                            });
                        }
                    });
                });

                $('#addArchetypeBtn').on('click', function () {
                    $('#createArchetypeModal').modal('show');
                });

                // Save Archetype button click handler
                $('#saveArchetype').on('click', function () {
                    // Reset any previous validation styling
                    $('.is-invalid').removeClass('is-invalid');

                    // Collect form data
                    var formData = {
                        Domain: $('#Domain').val(),
                        Description: $('#Description').val(),
                        Architect: $('#Architect').val(),
                        ExternalLink: $('#ExternalLink').val(),
                        Icon: $('#Icon').val(),
                        ArchetypeBeatIds: [],
                        ArchetypeGenreIds: []
                    };

                    console.log('Form Data:', formData);
                    // Show loading state
                    var saveButton = $(this);
                    saveButton.prop('disabled', true);
                    saveButton.html('<i class="fas fa-spinner fa-spin me-1"></i> Saving...');

                    $.ajax({
                        url: '@Url.Action("CreateArchetype", "Archetypes")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(formData),
                        success: function (result) {

                            $('#createArchetypeModal').modal('hide');

                            const newRowHtml = `
                        <tr class="clickable-row" data-id="${result.id}" style="cursor: pointer;">
                            <td>
                                <img src="${window.location.origin}/Images/${result.icon}" alt="${result.domain}"
                                class="rounded-circle" width="48" height="48">
                            </td>
                            <td>${result.domain}</td>
                            <td>${result.architect}</td>
                            <td><span class="badge bg-primary">Active</span></td>
                            <td class="text-end">
                                <button class="btn btn-link text-danger delete-archetype"
                                    data-id="${result.id}" data-name="${result.domain}"
                                    onclick="event.stopPropagation();" title="Delete ${result.domain}">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </td>
                        </tr>`;

                            // Add new row to table
                            const newRow = $(newRowHtml);
                            $('table tbody').append(newRow);

                            // Update visual selection state for all rows and select new row
                            $('.clickable-row').removeClass('table-active');
                            $newRow.addClass('table-active');

                            initializeRows();

                            // Load details for the new archetype
                            loadArchetypeDetails(result.id);

                            showToast('Success', 'Archetype has been created successfully.', 'success');

                            // Reset form
                            $('#createArchetypeForm')[0].reset();
                        },
                        error: function (xhr, status, error) {
                            // Handle validation errors
                            if (xhr.status === 400 && xhr.responseJSON) {
                                Object.keys(xhr.responseJSON).forEach(function (key) {
                                    var input = $('#' + key);
                                    input.addClass('is-invalid');
                                    input.siblings('.invalid-feedback').text(xhr.responseJSON[key].join(' '));
                                });
                            } else {
                                showToast('Error', 'Failed to create archetype: ' + (xhr.responseText || error), 'error');
                            }
                        },
                        complete: function () {
                            // Reset button state
                            saveButton.prop('disabled', false);
                            saveButton.html('<i class="fas fa-save me-1"></i> Save Archetype');
                        }
                    });
                });

                var iconDropzone = new Dropzone("#iconDropzone", {
                    url: "@Url.Action("UploadIcon", "Archetypes")", // We'll create this action
                    maxFiles: 1,
                    maxFilesize: 2, // MB
                    acceptedFiles: "image/*",
                    addRemoveLinks: true,
                    createImageThumbnails: true,
                    thumbnailWidth: 120,
                    thumbnailHeight: 120,
                    init: function () {

                        this.on("maxfilesexceeded", function (file) {
                            // Remove any existing files before adding a new one
                            this.removeAllFiles();
                            this.addFile(file);
                        });

                        this.on("addedfile", function (file) {
                            // If there's already a file, remove it
                            if (this.files.length > 1) {
                                this.removeFile(this.files[0]);
                            }
                        });

                        this.on("success", function (file, response) {
                            // Store the uploaded file name in the hidden input
                            $('#Icon').val(response.fileName);

                            showToast('Success', 'Icon uploaded successfully', 'success');
                        });

                        this.on("error", function (file, errorMessage) {
                            showToast('Error', 'Failed to upload icon: ' + errorMessage, 'error');
                        });

                        this.on("removedfile", function (file) {
                            // Clear the hidden input when file is removed
                            $('#Icon').val('');
                        });
                    }
                });

                // Clear dropzone when modal is hidden
                $('#createArchetypeModal').on('hidden.bs.modal', function () {
                    iconDropzone.removeAllFiles(true);
                    $('#Icon').val('');
                });

                // Click handler for rows
                $('.clickable-row').on('click', function () {
                    var archetypeId = $(this).data('id');
                    loadArchetypeDetails(archetypeId);
                });

                // Automatically load the first archetype's details
                var firstRow = $('.clickable-row').first();
                if (firstRow.length > 0) {
                    loadArchetypeDetails(firstRow.data('id'));
                }

                // Add New Genre button
                function initializeGenreHandlers() {
                    $('#addGenreBtn').click(function () {
                        $('#createGenreModal').modal('show');
                    });

                    $('#saveGenre').click(function () {
                        var formData = {
                            name: $('#Name').val().replace('Name: ', ''),
                            description: $('#Description').val().replace('Desc: ', ''),
                            archetypeId: $('#ArchetypeId').val()
                        };

                        console.log('Genre Form Data:', JSON.stringify(formData));

                        $.ajax({
                            url: '@Url.Action("CreateGenre", "Archetypes")',
                            type: 'POST',
                            data: JSON.stringify(formData),
                            contentType: 'application/json',
                            success: function (response) {
                                if (response.success) {
                                    $('#createGenreModal').modal('hide');

                                    // Get current archetype ID
                                    var currentArchetypeId = $('#ArchetypeId').val();

                                    // Reload the details
                                    loadArchetypeDetails(currentArchetypeId);

                                    // Switch to genre tab after reload
                                    setTimeout(function () {
                                        $('#genre-tab').tab('show');
                                    }, 500);

                                    showToast('Success', 'Genre added successfully', 'success');

                                    // Reset the form
                                    $('#createGenreForm')[0].reset();

                                } else {
                                    $('#createGenreModal').modal('hide');
                                    setTimeout(function () {
                                        showToast('Error', 'Failed to create genre: ' + response.message, 'error');
                                    }, 500);
                                }
                            },
                            error: function (xhr, status, error) {
                                $('#createGenreModal').modal('hide');
                                setTimeout(function () {
                                    showToast('Error', 'Failed to create genre: ' + response.message, 'error');
                                }, 500);
                            }
                        });
                    });

                    $('#genre').on('click', '.remove-genre-btn', function (e) {
                        e.preventDefault();
                        e.stopPropagation();

                        const genreId = $(this).data('genre-id');
                        const genreName = $(this).data('genre-name');

                        Swal.fire({
                            title: 'Are you sure?',
                            text: `You are about to remove "${genreName}". This action cannot be undone.`,
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#d33',
                            cancelButtonColor: '#3085d6',
                            confirmButtonText: 'Yes, remove it!',
                            cancelButtonText: 'Cancel'
                        }).then((result) => {
                            if (result.isConfirmed) {

                                $.ajax({
                                    url: '@Url.Action("DeleteGenre", "Archetypes")',
                                    type: 'DELETE',
                                    data: { id: genreId },
                                    success: function (result) {
                                        if (result.success) {
                                            const currentArchetypeId = $('#ArchetypeId').val();
                                            loadArchetypeDetails(currentArchetypeId);
                                            setTimeout(function () {
                                                $('#genre-tab').tab('show');
                                            }, 500);
                                            showToast('Success', `Genre "${genreName}" has been removed.`, 'success');
                                        } else {
                                            showToast('Error', 'Failed to remove genre: ' + (result.message || 'Unknown error'), 'error');
                                        }
                                    },
                                    error: function (xhr, status, error) {
                                        showToast('Error', 'Failed to remove genre: ' + error, 'error');
                                    }
                                });
                            }
                        });
                    });

                }

                function showToast(title, message, type = 'success') {
                    const toastId = 'toast-' + Date.now();
                    const backgroundColor = type === 'success' ? 'bg-success' : 'bg-danger';
                    const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';

                    const toastHtml = `
                                                                                            <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                                                                                                <div class="toast-header ${backgroundColor} text-white">
                                                                                                    <i class="fas ${icon} me-2"></i>
                                                                                                    <strong class="me-auto">${title}</strong>
                                                                                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                                                                                                </div>
                                                                                                <div class="toast-body">
                                                                                                    ${message}
                                                                                                </div>
                                                                                            </div>
                                                                                        `;

                    $('.toast-container').append(toastHtml);
                    const toastElement = document.getElementById(toastId);
                    const toast = new bootstrap.Toast(toastElement, { delay: 3000 });
                    toast.show();

                    // Remove toast element after it's hidden
                    toastElement.addEventListener('hidden.bs.toast', function () {
                        $(this).remove();
                    });
                }
            });
        </script>
    }